{"ast":null,"code":"// blockCahin.js\nimport{useState,useEffect}from'react';import Web3 from'web3';import WillSystemABI from'../smartContract/will_system.json';import axios from'axios';/**\r\n   *  여기서는 블록체인에 해시값을 호출하는 코드를 작성한다.\r\n   */export default function BlockChainHashHook(willCode){const BaseURL=process.env.REACT_APP_API_URL;const[web3,setWeb3]=useState(null);const[contract,setContract]=useState(null);const[result,setResult]=useState([{}]);useEffect(()=>{async function init(){var backRes;// web 3 생성\nconst web3=new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_URL));setWeb3(web3);// 스마트 컨트랙트 설정\nconst contractAddress=process.env.REACT_APP_CONTRACT_ADDRESS;const contract=new web3.eth.Contract(WillSystemABI,contractAddress);setContract(contract);////// S3 버킷에 올라간 파일을 가져오는 코드\n// 0. 임시 공간에 저장 \n// console.log(BaseURL + 'api/will/certificate/');\n// const willCode = 'e3a03883-8685-488f-b620-ac641e3c1432';\n// 1. 다운받는다 - cors 뜰것같음 Pass\n// 2. 해시값을 구한다\nlet formData=new FormData();formData.append('willCode',willCode);await axios.post(\"\".concat(BaseURL,\"/api/will/certificate\"),formData).then(res=>{backRes={'hash':res.data['hashCode'],'id':res.data['userId']};console.log(res.data);}).catch(e=>{console.log(e);});var params=[backRes['hash'],backRes['id']];// 해시값을 소문자로 바꾼다\nparams[0]=params[0].toLowerCase();console.log(params);try{// 함수 호출\n// const hash = await contract.methods.addressToWill('0x080D12635a2204dA298c1B8eF5653c70718ac058').call() \nvar k;var res=await contract.methods.SearchByHash(params[0],params[1]).call().then(r=>{k=r.toString();// setResult(r.toString());\nconsole.log('성공rr',r.toString());}).catch(e=>{console.log(e);});// console.log(res);\n}catch(e){console.log(e);}k==='200'?setResult(true):setResult(false);return;}// init() 함수 끝\ninit();// 비동기 함수 호출\n},[]);return result;}","map":{"version":3,"names":["useState","useEffect","Web3","WillSystemABI","axios","BlockChainHashHook","willCode","BaseURL","process","env","REACT_APP_API_URL","web3","setWeb3","contract","setContract","result","setResult","init","backRes","providers","HttpProvider","REACT_APP_RPC_URL","contractAddress","REACT_APP_CONTRACT_ADDRESS","eth","Contract","formData","FormData","append","post","concat","then","res","data","console","log","catch","e","params","toLowerCase","k","methods","SearchByHash","call","r","toString"],"sources":["C:/Users/SSAFY/Desktop/react/S10P22C208/frontend/src/hooks/blockChainHash.js"],"sourcesContent":["// blockCahin.js\r\nimport { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport WillSystemABI from '../smartContract/will_system.json';\r\nimport  axios from 'axios';\r\n\r\n  /**\r\n   *  여기서는 블록체인에 해시값을 호출하는 코드를 작성한다.\r\n   */\r\nexport default function BlockChainHashHook (willCode) {\r\n\r\n  const BaseURL = process.env.REACT_APP_API_URL;\r\n  const [web3, setWeb3] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [result, setResult] = useState([{}]);\r\n  \r\n\r\n  useEffect(() => {\r\n  async function init() {\r\n    var backRes\r\n    // web 3 생성\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_URL));\r\n    setWeb3(web3);\r\n    // 스마트 컨트랙트 설정\r\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\r\n    const contract = new web3.eth.Contract(WillSystemABI, contractAddress);\r\n    setContract(contract);\r\n\r\n    \r\n    ////// S3 버킷에 올라간 파일을 가져오는 코드\r\n    // 0. 임시 공간에 저장 \r\n    // console.log(BaseURL + 'api/will/certificate/');\r\n    // const willCode = 'e3a03883-8685-488f-b620-ac641e3c1432';\r\n\r\n    // 1. 다운받는다 - cors 뜰것같음 Pass\r\n\r\n    // 2. 해시값을 구한다\r\n    \r\n    let formData = new FormData();\r\n    formData.append('willCode', willCode);\r\n    \r\n    await axios.post(`${BaseURL}/api/will/certificate`, formData)\r\n    .then((res) => {backRes = {'hash' : res.data['hashCode'], 'id' : res.data['userId']}; console.log(res.data);})\r\n    .catch((e) => {console.log(e)});\r\n    \r\n    var params = [backRes['hash'], backRes['id']];\r\n    // 해시값을 소문자로 바꾼다\r\n    params[0] = params[0].toLowerCase();\r\n    console.log(params);\r\n    try {\r\n      // 함수 호출\r\n      // const hash = await contract.methods.addressToWill('0x080D12635a2204dA298c1B8eF5653c70718ac058').call() \r\n      \r\n      var k;\r\n\r\n      var res = await contract.methods.SearchByHash(params[0], params[1]).call().then((r) => {\r\n        k = r.toString();\r\n        // setResult(r.toString());\r\n        console.log('성공rr', r.toString());\r\n      }).catch((e) => {console.log(e)});\r\n      // console.log(res);\r\n    } catch (e) {console.log(e);}\r\n\r\n     k === '200'? setResult(true) : setResult(false);\r\n    return \r\n\r\n\r\n  } // init() 함수 끝\r\n\r\n  init(); // 비동기 함수 호출\r\n}, []);\r\n  return result\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}