{"ast":null,"code":"var _s = $RefreshSig$();\n// blockCahin.js\nimport { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport WillSystemABI from '../smartContract/will_system.json';\nimport axios from 'axios';\n\n/**\r\n *  여기서는 블록체인에 해시값을 호출하는 코드를 작성한다.\r\n */\nexport default function BlockChainHashHook(willCode) {\n  _s();\n  const BaseURL = process.env.REACT_APP_API_URL;\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [result, setResult] = useState([{}]);\n  useEffect(() => {\n    async function init() {\n      var backRes;\n      // web 3 생성\n      const web3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_URL));\n      setWeb3(web3);\n      // 스마트 컨트랙트 설정\n      const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n      const contract = new web3.eth.Contract(WillSystemABI, contractAddress);\n      setContract(contract);\n\n      ////// S3 버킷에 올라간 파일을 가져오는 코드\n      // 0. 임시 공간에 저장 \n      // console.log(BaseURL + 'api/will/certificate/');\n      // const willCode = 'e3a03883-8685-488f-b620-ac641e3c1432';\n\n      // 1. 다운받는다 - cors 뜰것같음 Pass\n\n      // 2. 해시값을 구한다\n\n      let formData = new FormData();\n      formData.append('willCode', willCode);\n      await axios.post(`${BaseURL}/api/will/certificate`, formData).then(res => {\n        backRes = {\n          'hash': res.data['hashCode'],\n          'id': res.data['userId']\n        };\n        console.log(res.data);\n      }).catch(e => {\n        console.log(e);\n      });\n      var params = [backRes['hash'], backRes['id']];\n      // 해시값을 소문자로 바꾼다\n      params[0] = params[0].toLowerCase();\n      console.log(params);\n      try {\n        // 함수 호출\n        // const hash = await contract.methods.addressToWill('0x080D12635a2204dA298c1B8eF5653c70718ac058').call() \n\n        var k;\n        var res = await contract.methods.SearchByHash(params[0], params[1]).call().then(r => {\n          k = r.toString();\n          // setResult(r.toString());\n          console.log('성공rr', r.toString());\n        }).catch(e => {\n          console.log(e);\n        });\n        // console.log(res);\n      } catch (e) {\n        console.log(e);\n      }\n      k === '200' ? setResult(true) : setResult(false);\n      return;\n    } // init() 함수 끝\n\n    init(); // 비동기 함수 호출\n  }, []);\n  return result;\n}\n_s(BlockChainHashHook, \"mCLB/VVdlwNMRpLftkKAgOIdqgA=\");\n_c = BlockChainHashHook;\nvar _c;\n$RefreshReg$(_c, \"BlockChainHashHook\");","map":{"version":3,"names":["useState","useEffect","Web3","WillSystemABI","axios","BlockChainHashHook","willCode","_s","BaseURL","process","env","REACT_APP_API_URL","web3","setWeb3","contract","setContract","result","setResult","init","backRes","providers","HttpProvider","REACT_APP_RPC_URL","contractAddress","REACT_APP_CONTRACT_ADDRESS","eth","Contract","formData","FormData","append","post","then","res","data","console","log","catch","e","params","toLowerCase","k","methods","SearchByHash","call","r","toString","_c","$RefreshReg$"],"sources":["C:/Users/SSAFY/Desktop/react/S10P22C208/frontend_react/src/hooks/blockChainHash.js"],"sourcesContent":["// blockCahin.js\r\nimport { useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport WillSystemABI from '../smartContract/will_system.json';\r\nimport  axios from 'axios';\r\n\r\n  /**\r\n   *  여기서는 블록체인에 해시값을 호출하는 코드를 작성한다.\r\n   */\r\nexport default function BlockChainHashHook (willCode) {\r\n\r\n  const BaseURL = process.env.REACT_APP_API_URL;\r\n  const [web3, setWeb3] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [result, setResult] = useState([{}]);\r\n  \r\n\r\n  useEffect(() => {\r\n  async function init() {\r\n    var backRes\r\n    // web 3 생성\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_URL));\r\n    setWeb3(web3);\r\n    // 스마트 컨트랙트 설정\r\n    const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\r\n    const contract = new web3.eth.Contract(WillSystemABI, contractAddress);\r\n    setContract(contract);\r\n\r\n    \r\n    ////// S3 버킷에 올라간 파일을 가져오는 코드\r\n    // 0. 임시 공간에 저장 \r\n    // console.log(BaseURL + 'api/will/certificate/');\r\n    // const willCode = 'e3a03883-8685-488f-b620-ac641e3c1432';\r\n\r\n    // 1. 다운받는다 - cors 뜰것같음 Pass\r\n\r\n    // 2. 해시값을 구한다\r\n    \r\n    let formData = new FormData();\r\n    formData.append('willCode', willCode);\r\n    \r\n    await axios.post(`${BaseURL}/api/will/certificate`, formData)\r\n    .then((res) => {backRes = {'hash' : res.data['hashCode'], 'id' : res.data['userId']}; console.log(res.data);})\r\n    .catch((e) => {console.log(e)});\r\n    \r\n    var params = [backRes['hash'], backRes['id']];\r\n    // 해시값을 소문자로 바꾼다\r\n    params[0] = params[0].toLowerCase();\r\n    console.log(params);\r\n    try {\r\n      // 함수 호출\r\n      // const hash = await contract.methods.addressToWill('0x080D12635a2204dA298c1B8eF5653c70718ac058').call() \r\n      \r\n      var k;\r\n\r\n      var res = await contract.methods.SearchByHash(params[0], params[1]).call().then((r) => {\r\n        k = r.toString();\r\n        // setResult(r.toString());\r\n        console.log('성공rr', r.toString());\r\n      }).catch((e) => {console.log(e)});\r\n      // console.log(res);\r\n    } catch (e) {console.log(e);}\r\n\r\n     k === '200'? setResult(true) : setResult(false);\r\n    return \r\n\r\n\r\n  } // init() 함수 끝\r\n\r\n  init(); // 비동기 함수 호출\r\n}, []);\r\n  return result\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}