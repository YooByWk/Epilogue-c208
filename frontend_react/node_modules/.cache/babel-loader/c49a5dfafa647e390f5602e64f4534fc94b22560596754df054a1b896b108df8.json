{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ConnectionError, ConnectionNotOpenError, InvalidClientError, MaxAttemptsReachedOnReconnectingError, PendingRequestsOnReconnectingError, RequestAlreadySentError, Web3WSProviderError } from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\nconst DEFAULT_RECONNECTION_OPTIONS = {\n  autoReconnect: true,\n  delay: 5000,\n  maxAttempts: 5\n};\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\nexport class SocketProvider extends Eip1193Provider {\n  /**\n   * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n   * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n   * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n   * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n   */\n  constructor(socketPath, socketOptions, reconnectOptions) {\n    super();\n    this._connectionStatus = 'connecting';\n    // Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n    this._onMessageHandler = this._onMessage.bind(this);\n    this._onOpenHandler = this._onConnect.bind(this);\n    this._onCloseHandler = this._onCloseEvent.bind(this);\n    this._onErrorHandler = this._onError.bind(this);\n    if (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n    this._socketPath = socketPath;\n    this._socketOptions = socketOptions;\n    this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});\n    this._pendingRequestsQueue = new Map();\n    this._sentRequestsQueue = new Map();\n    this._init();\n    this.connect();\n    this.chunkResponseParser = new ChunkResponseParser(this._eventEmitter, this._reconnectOptions.autoReconnect);\n    this.chunkResponseParser.onError(() => {\n      this._clearQueues();\n    });\n    this.isReconnecting = false;\n  }\n  get SocketConnection() {\n    return this._socketConnection;\n  }\n  _init() {\n    this._reconnectAttempts = 0;\n  }\n  /**\n   * Try to establish a connection to the socket\n   */\n  connect() {\n    try {\n      this._openSocketConnection();\n      this._connectionStatus = 'connecting';\n      this._addSocketListeners();\n    } catch (e) {\n      if (!this.isReconnecting) {\n        this._connectionStatus = 'disconnected';\n        if (e && e.message) {\n          throw new ConnectionError(\"Error while connecting to \".concat(this._socketPath, \". Reason: \").concat(e.message));\n        } else {\n          throw new InvalidClientError(this._socketPath);\n        }\n      } else {\n        setImmediate(() => {\n          this._reconnect();\n        });\n      }\n    }\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _validateProviderPath(path) {\n    return !!path;\n  }\n  /**\n   *\n   * @returns the pendingRequestQueue size\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getPendingRequestQueueSize() {\n    return this._pendingRequestsQueue.size;\n  }\n  /**\n   *\n   * @returns the sendPendingRequests size\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getSentRequestsQueueSize() {\n    return this._sentRequestsQueue.size;\n  }\n  /**\n   *\n   * @returns `true` if the socket supports subscriptions\n   */\n  // eslint-disable-next-line class-methods-use-this\n  supportsSubscriptions() {\n    return true;\n  }\n  on(type, listener) {\n    this._eventEmitter.on(type, listener);\n  }\n  once(type, listener) {\n    this._eventEmitter.once(type, listener);\n  }\n  removeListener(type, listener) {\n    this._eventEmitter.removeListener(type, listener);\n  }\n  _onDisconnect(code, data) {\n    this._connectionStatus = 'disconnected';\n    super._onDisconnect(code, data);\n  }\n  /**\n   * Disconnects the socket\n   * @param code - The code to be sent to the server\n   * @param data - The data to be sent to the server\n   */\n  disconnect(code, data) {\n    const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;\n    this._removeSocketListeners();\n    if (this.getStatus() !== 'disconnected') {\n      this._closeSocketConnection(disconnectCode, data);\n    }\n    this._onDisconnect(disconnectCode, data);\n  }\n  /**\n   * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting\n   * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0\n   * @param ms - Determines the ms of setInterval\n   * @param code - The code to be sent to the server\n   * @param data - The data to be sent to the server\n   */\n  safeDisconnect(code, data) {\n    let forceDisconnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let ms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    return __awaiter(this, void 0, void 0, function* () {\n      let retryAttempt = 0;\n      const checkQueue = () => __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => {\n          const interval = setInterval(() => {\n            if (forceDisconnect && retryAttempt === 5) {\n              this.clearQueues();\n            }\n            if (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {\n              clearInterval(interval);\n              resolve(true);\n            }\n            retryAttempt += 1;\n          }, ms);\n        });\n      });\n      yield checkQueue();\n      this.disconnect(code, data);\n    });\n  }\n  /**\n   * Removes all listeners for the specified event type.\n   * @param type - The event type to remove the listeners for\n   */\n  removeAllListeners(type) {\n    this._eventEmitter.removeAllListeners(type);\n  }\n  _onError(event) {\n    // do not emit error while trying to reconnect\n    if (this.isReconnecting) {\n      this._reconnect();\n    } else {\n      this._eventEmitter.emit('error', event);\n    }\n  }\n  /**\n   * Resets the socket, removing all listeners and pending requests\n   */\n  reset() {\n    this._sentRequestsQueue.clear();\n    this._pendingRequestsQueue.clear();\n    this._init();\n    this._removeSocketListeners();\n    this._addSocketListeners();\n  }\n  _reconnect() {\n    if (this.isReconnecting) {\n      return;\n    }\n    this.isReconnecting = true;\n    if (this._sentRequestsQueue.size > 0) {\n      this._sentRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n        this._sentRequestsQueue.delete(key);\n      });\n    }\n    if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n      this._reconnectAttempts += 1;\n      setTimeout(() => {\n        this._removeSocketListeners();\n        this.connect();\n        this.isReconnecting = false;\n      }, this._reconnectOptions.delay);\n    } else {\n      this.isReconnecting = false;\n      this._clearQueues();\n      this._removeSocketListeners();\n      this._eventEmitter.emit('error', new MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));\n    }\n  }\n  /**\n   *  Creates a request object to be sent to the server\n   */\n  request(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isNullish(this._socketConnection)) {\n        throw new Error('Connection is undefined');\n      }\n      // if socket disconnected - open connection\n      if (this.getStatus() === 'disconnected') {\n        this.connect();\n      }\n      const requestId = jsonRpc.isBatchRequest(request) ? request[0].id : request.id;\n      if (!requestId) {\n        throw new Web3WSProviderError('Request Id not defined');\n      }\n      if (this._sentRequestsQueue.has(requestId)) {\n        throw new RequestAlreadySentError(requestId);\n      }\n      const deferredPromise = new Web3DeferredPromise();\n      deferredPromise.catch(error => {\n        this._eventEmitter.emit('error', error);\n      });\n      const reqItem = {\n        payload: request,\n        deferredPromise\n      };\n      if (this.getStatus() === 'connecting') {\n        this._pendingRequestsQueue.set(requestId, reqItem);\n        return reqItem.deferredPromise;\n      }\n      this._sentRequestsQueue.set(requestId, reqItem);\n      try {\n        this._sendToSocket(reqItem.payload);\n      } catch (error) {\n        this._sentRequestsQueue.delete(requestId);\n        this._eventEmitter.emit('error', error);\n      }\n      return deferredPromise;\n    });\n  }\n  _onConnect() {\n    this._connectionStatus = 'connected';\n    this._reconnectAttempts = 0;\n    super._onConnect();\n    this._sendPendingRequests();\n  }\n  _sendPendingRequests() {\n    for (const [id, value] of this._pendingRequestsQueue.entries()) {\n      this._sendToSocket(value.payload);\n      this._pendingRequestsQueue.delete(id);\n      this._sentRequestsQueue.set(id, value);\n    }\n  }\n  _onMessage(event) {\n    const responses = this._parseResponses(event);\n    if (isNullish(responses) || responses.length === 0) {\n      return;\n    }\n    for (const response of responses) {\n      if (jsonRpc.isResponseWithNotification(response) && response.method.endsWith('_subscription')) {\n        this._eventEmitter.emit('message', response);\n        return;\n      }\n      const requestId = jsonRpc.isBatchResponse(response) ? response[0].id : response.id;\n      const requestItem = this._sentRequestsQueue.get(requestId);\n      if (!requestItem) {\n        return;\n      }\n      if (jsonRpc.isBatchResponse(response) || jsonRpc.isResponseWithResult(response) || jsonRpc.isResponseWithError(response)) {\n        this._eventEmitter.emit('message', response);\n        requestItem.deferredPromise.resolve(response);\n      }\n      this._sentRequestsQueue.delete(requestId);\n    }\n  }\n  clearQueues(event) {\n    this._clearQueues(event);\n  }\n  _clearQueues(event) {\n    if (this._pendingRequestsQueue.size > 0) {\n      this._pendingRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new ConnectionNotOpenError(event));\n        this._pendingRequestsQueue.delete(key);\n      });\n    }\n    if (this._sentRequestsQueue.size > 0) {\n      this._sentRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new ConnectionNotOpenError(event));\n        this._sentRequestsQueue.delete(key);\n      });\n    }\n    this._removeSocketListeners();\n  }\n}","map":{"version":3,"names":["ConnectionError","ConnectionNotOpenError","InvalidClientError","MaxAttemptsReachedOnReconnectingError","PendingRequestsOnReconnectingError","RequestAlreadySentError","Web3WSProviderError","Eip1193Provider","ChunkResponseParser","isNullish","Web3DeferredPromise","jsonRpc","DEFAULT_RECONNECTION_OPTIONS","autoReconnect","delay","maxAttempts","NORMAL_CLOSE_CODE","SocketProvider","constructor","socketPath","socketOptions","reconnectOptions","_connectionStatus","_onMessageHandler","_onMessage","bind","_onOpenHandler","_onConnect","_onCloseHandler","_onCloseEvent","_onErrorHandler","_onError","_validateProviderPath","_socketPath","_socketOptions","_reconnectOptions","Object","assign","_pendingRequestsQueue","Map","_sentRequestsQueue","_init","connect","chunkResponseParser","_eventEmitter","onError","_clearQueues","isReconnecting","SocketConnection","_socketConnection","_reconnectAttempts","_openSocketConnection","_addSocketListeners","e","message","concat","setImmediate","_reconnect","path","getPendingRequestQueueSize","size","getSentRequestsQueueSize","supportsSubscriptions","on","type","listener","once","removeListener","_onDisconnect","code","data","disconnect","disconnectCode","_removeSocketListeners","getStatus","_closeSocketConnection","safeDisconnect","forceDisconnect","arguments","length","undefined","ms","retryAttempt","checkQueue","__awaiter","Promise","resolve","interval","setInterval","clearQueues","clearInterval","removeAllListeners","event","emit","reset","clear","forEach","request","key","deferredPromise","reject","delete","setTimeout","Error","requestId","isBatchRequest","id","has","catch","error","reqItem","payload","set","_sendToSocket","_sendPendingRequests","value","entries","responses","_parseResponses","response","isResponseWithNotification","method","endsWith","isBatchResponse","requestItem","get","isResponseWithResult","isResponseWithError"],"sources":["C:\\Users\\SSAFY\\Desktop\\react\\S10P22C208\\frontend_react\\node_modules\\web3-utils\\src\\socket_provider.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tConnectionEvent,\n\tEip1193EventName,\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcId,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResult,\n\tProviderConnectInfo,\n\tProviderMessage,\n\tProviderRpcError,\n\tSocketRequestItem,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3Eip1193ProviderEventCallback,\n\tWeb3ProviderEventCallback,\n\tWeb3ProviderMessageEventCallback,\n\tWeb3ProviderStatus,\n} from 'web3-types';\nimport {\n\tConnectionError,\n\tConnectionNotOpenError,\n\tInvalidClientError,\n\tMaxAttemptsReachedOnReconnectingError,\n\tPendingRequestsOnReconnectingError,\n\tRequestAlreadySentError,\n\tWeb3WSProviderError,\n} from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\n\nexport type ReconnectOptions = {\n\tautoReconnect: boolean;\n\tdelay: number;\n\tmaxAttempts: number;\n};\n\nconst DEFAULT_RECONNECTION_OPTIONS = {\n\tautoReconnect: true,\n\tdelay: 5000,\n\tmaxAttempts: 5,\n};\n\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\n\nexport abstract class SocketProvider<\n\tMessageEvent,\n\tCloseEvent,\n\tErrorEvent,\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Eip1193Provider<API> {\n\tprotected isReconnecting: boolean;\n\tprotected readonly _socketPath: string;\n\tprotected readonly chunkResponseParser: ChunkResponseParser;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _pendingRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _sentRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\tprotected _reconnectAttempts!: number;\n\tprotected readonly _socketOptions?: unknown;\n\tprotected readonly _reconnectOptions: ReconnectOptions;\n\tprotected _socketConnection?: unknown;\n\tpublic get SocketConnection() {\n\t\treturn this._socketConnection;\n\t}\n\tprotected _connectionStatus: Web3ProviderStatus;\n\tprotected readonly _onMessageHandler: (event: MessageEvent) => void;\n\tprotected readonly _onOpenHandler: () => void;\n\tprotected readonly _onCloseHandler: (event: CloseEvent) => void;\n\tprotected readonly _onErrorHandler: (event: ErrorEvent) => void;\n\n\t/**\n\t * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n\t * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n\t * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n\t * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n\t */\n\tpublic constructor(\n\t\tsocketPath: string,\n\t\tsocketOptions?: unknown,\n\t\treconnectOptions?: Partial<ReconnectOptions>,\n\t) {\n\t\tsuper();\n\t\tthis._connectionStatus = 'connecting';\n\n\t\t// Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n\t\tthis._onMessageHandler = this._onMessage.bind(this);\n\t\tthis._onOpenHandler = this._onConnect.bind(this);\n\t\tthis._onCloseHandler = this._onCloseEvent.bind(this);\n\t\tthis._onErrorHandler = this._onError.bind(this);\n\n\t\tif (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n\n\t\tthis._socketPath = socketPath;\n\t\tthis._socketOptions = socketOptions;\n\t\tthis._reconnectOptions = {\n\t\t\t...DEFAULT_RECONNECTION_OPTIONS,\n\t\t\t...(reconnectOptions ?? {}),\n\t\t};\n\n\t\tthis._pendingRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\t\tthis._sentRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\n\t\tthis._init();\n\t\tthis.connect();\n\t\tthis.chunkResponseParser = new ChunkResponseParser(\n\t\t\tthis._eventEmitter,\n\t\t\tthis._reconnectOptions.autoReconnect,\n\t\t);\n\t\tthis.chunkResponseParser.onError(() => {\n\t\t\tthis._clearQueues();\n\t\t});\n\t\tthis.isReconnecting = false;\n\t}\n\n\tprotected _init() {\n\t\tthis._reconnectAttempts = 0;\n\t}\n\n\t/**\n\t * Try to establish a connection to the socket\n\t */\n\tpublic connect(): void {\n\t\ttry {\n\t\t\tthis._openSocketConnection();\n\t\t\tthis._connectionStatus = 'connecting';\n\t\t\tthis._addSocketListeners();\n\t\t} catch (e) {\n\t\t\tif (!this.isReconnecting) {\n\t\t\t\tthis._connectionStatus = 'disconnected';\n\t\t\t\tif (e && (e as Error).message) {\n\t\t\t\t\tthrow new ConnectionError(\n\t\t\t\t\t\t`Error while connecting to ${this._socketPath}. Reason: ${\n\t\t\t\t\t\t\t(e as Error).message\n\t\t\t\t\t\t}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidClientError(this._socketPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tthis._reconnect();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract _openSocketConnection(): void;\n\tprotected abstract _addSocketListeners(): void;\n\n\tprotected abstract _removeSocketListeners(): void;\n\n\tprotected abstract _onCloseEvent(_event: unknown): void;\n\n\tprotected abstract _sendToSocket(_payload: Web3APIPayload<API, any>): void;\n\n\tprotected abstract _parseResponses(_event: MessageEvent): JsonRpcResponse[];\n\n\tprotected abstract _closeSocketConnection(_code?: number, _data?: string): void;\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected _validateProviderPath(path: string): boolean {\n\t\treturn !!path;\n\t}\n\t\n\t/**\n\t *\n\t * @returns the pendingRequestQueue size\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic getPendingRequestQueueSize()  {\n\t\treturn this._pendingRequestsQueue.size;\n\t}\n\n\t/**\n\t *\n\t * @returns the sendPendingRequests size\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic getSentRequestsQueueSize() {\n\t\treturn this._sentRequestsQueue.size;\n\t}\n\n\t/**\n\t *\n\t * @returns `true` if the socket supports subscriptions\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type.\n\t * @param type - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic on(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic on(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic on(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic on(type: 'accountsChanged', listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.on(type, listener);\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type that will be invoked at most once.\n\t * @param type  - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic once(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic once(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic once(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic once(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.once(type, listener);\n\t}\n\n\t/**\n\t *  Removes a listener for the specified event type.\n\t * @param type - The event type to remove the listener for\n\t * @param listener - The callback to be executed\n\t */\n\tpublic removeListener(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'chainChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.removeListener(type, listener);\n\t}\n\n\tprotected _onDisconnect(code: number, data?: string) {\n\t\tthis._connectionStatus = 'disconnected';\n\t\tsuper._onDisconnect(code, data);\n\t}\n\n\t/**\n\t * Disconnects the socket\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic disconnect(code?: number, data?: string): void {\n\t\tconst disconnectCode = code ?? NORMAL_CLOSE_CODE;\n\t\tthis._removeSocketListeners();\n\t\tif (this.getStatus() !== 'disconnected') {\n\t\t\tthis._closeSocketConnection(disconnectCode, data);\n\t\t}\n\t\tthis._onDisconnect(disconnectCode, data);\n\t}\n\n\t/**\n\t * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting\n\t * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0  \n\t * @param ms - Determines the ms of setInterval\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic async safeDisconnect(code?: number, data?: string, forceDisconnect = false,ms = 1000) {\n\t\tlet retryAttempt = 0;\n\t\tconst checkQueue = async () => \n\t\t\tnew Promise(resolve => {\n\t\t\t\tconst interval = setInterval(() => {\n\t\t\t\t\tif (forceDisconnect && retryAttempt === 5) {\n\t\t\t\t\t\tthis.clearQueues();\n\t\t\t\t\t}\n\t\t\t\t\tif (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t}\n\t\t\t\t\tretryAttempt+=1;\n\t\t\t\t}, ms)\n\t\t\t})\n\t\t\n\t\tawait checkQueue();\n\t\tthis.disconnect(code, data);\n\t}\n\n\n\t/**\n\t * Removes all listeners for the specified event type.\n\t * @param type - The event type to remove the listeners for\n\t */\n\tpublic removeAllListeners(type: string): void {\n\t\tthis._eventEmitter.removeAllListeners(type);\n\t}\n\n\tprotected _onError(event: ErrorEvent): void {\n\t\t// do not emit error while trying to reconnect\n\t\tif (this.isReconnecting) {\n\t\t\tthis._reconnect();\n\t\t} else {\n\t\t\tthis._eventEmitter.emit('error', event);\n\t\t}\n\t}\n\n\t/**\n\t * Resets the socket, removing all listeners and pending requests\n\t */\n\tpublic reset(): void {\n\t\tthis._sentRequestsQueue.clear();\n\t\tthis._pendingRequestsQueue.clear();\n\n\t\tthis._init();\n\t\tthis._removeSocketListeners();\n\t\tthis._addSocketListeners();\n\t}\n\n\tprotected _reconnect(): void {\n\t\tif (this.isReconnecting) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isReconnecting = true;\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n\t\t\tthis._reconnectAttempts += 1;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._removeSocketListeners();\n\t\t\t\tthis.connect();\n\t\t\t\tthis.isReconnecting = false;\n\t\t\t}, this._reconnectOptions.delay);\n\t\t} else {\n\t\t\tthis.isReconnecting = false;\n\t\t\tthis._clearQueues();\n\t\t\tthis._removeSocketListeners();\n\t\t\tthis._eventEmitter.emit(\n\t\t\t\t'error',\n\t\t\t\tnew MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t *  Creates a request object to be sent to the server\n\t */\n\tpublic async request<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResultType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIPayload<API, Method>): Promise<JsonRpcResponseWithResult<ResultType>> {\n\t\tif (isNullish(this._socketConnection)) {\n\t\t\tthrow new Error('Connection is undefined');\n\t\t}\n\t\t// if socket disconnected - open connection\n\t\tif (this.getStatus() === 'disconnected') {\n\t\t\tthis.connect();\n\t\t}\n\n\t\tconst requestId = jsonRpc.isBatchRequest(request)\n\t\t\t? (request as unknown as JsonRpcBatchRequest)[0].id\n\t\t\t: (request as unknown as JsonRpcRequest).id;\n\n\t\tif (!requestId) {\n\t\t\tthrow new Web3WSProviderError('Request Id not defined');\n\t\t}\n\n\t\tif (this._sentRequestsQueue.has(requestId)) {\n\t\t\tthrow new RequestAlreadySentError(requestId);\n\t\t}\n\t\tconst deferredPromise = new Web3DeferredPromise<JsonRpcResponseWithResult<ResultType>>();\n\t\tdeferredPromise.catch(error => {\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t});\n\t\tconst reqItem: SocketRequestItem<API, Method, JsonRpcResponseWithResult<ResultType>> = {\n\t\t\tpayload: request,\n\t\t\tdeferredPromise,\n\t\t};\n\n\t\tif (this.getStatus() === 'connecting') {\n\t\t\tthis._pendingRequestsQueue.set(requestId, reqItem);\n\n\t\t\treturn reqItem.deferredPromise;\n\t\t}\n\n\t\tthis._sentRequestsQueue.set(requestId, reqItem);\n\n\t\ttry {\n\t\t\tthis._sendToSocket(reqItem.payload);\n\t\t} catch (error) {\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t}\n\n\t\treturn deferredPromise;\n\t}\n\n\tprotected _onConnect() {\n\t\tthis._connectionStatus = 'connected';\n\t\tthis._reconnectAttempts = 0;\n\t\tsuper._onConnect();\n\t\tthis._sendPendingRequests();\n\t}\n\n\tprivate _sendPendingRequests() {\n\t\tfor (const [id, value] of this._pendingRequestsQueue.entries()) {\n\t\t\tthis._sendToSocket(value.payload as Web3APIPayload<API, any>);\n\t\t\tthis._pendingRequestsQueue.delete(id);\n\t\t\tthis._sentRequestsQueue.set(id, value);\n\t\t}\n\t}\n\n\tprotected _onMessage(event: MessageEvent): void {\n\t\tconst responses = this._parseResponses(event);\n\t\tif (isNullish(responses) || responses.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (const response of responses) {\n\t\t\tif (\n\t\t\t\tjsonRpc.isResponseWithNotification(response as JsonRpcNotification) &&\n\t\t\t\t(response as JsonRpcNotification).method.endsWith('_subscription')\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst requestId = jsonRpc.isBatchResponse(response)\n\t\t\t\t? (response as unknown as JsonRpcBatchResponse)[0].id\n\t\t\t\t: (response as unknown as JsonRpcResponseWithResult).id;\n\n\t\t\tconst requestItem = this._sentRequestsQueue.get(requestId);\n\n\t\t\tif (!requestItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tjsonRpc.isBatchResponse(response) ||\n\t\t\t\tjsonRpc.isResponseWithResult(response) ||\n\t\t\t\tjsonRpc.isResponseWithError(response)\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\trequestItem.deferredPromise.resolve(response);\n\t\t\t}\n\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\t\t}\n\t}\n\t\n\tpublic clearQueues(event?: ConnectionEvent) {\n\t\tthis._clearQueues(event);\n\t}\n\n\tprotected _clearQueues(event?: ConnectionEvent) {\n\t\tif (this._pendingRequestsQueue.size > 0) {\n\t\t\tthis._pendingRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._pendingRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthis._removeSocketListeners();\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}