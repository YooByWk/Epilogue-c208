{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { mergeDeep, format, bytesToHex, toHex } from 'web3-utils';\nimport { TransactionDataAndInputError } from 'web3-errors';\nimport { transactionInfoSchema } from '../schemas.js';\nexport function formatTransaction(transaction) {\n  let returnFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_RETURN_FORMAT;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    transactionSchema: transactionInfoSchema,\n    fillInputAndData: false\n  };\n  var _a, _b;\n  let formattedTransaction = mergeDeep({}, transaction);\n  if (!isNullish(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {\n    formattedTransaction.common = Object.assign({}, transaction.common);\n    if (!isNullish((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain)) formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);\n  }\n  formattedTransaction = format((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : transactionInfoSchema, formattedTransaction, returnFormat);\n  if (!isNullish(formattedTransaction.data) && !isNullish(formattedTransaction.input) &&\n  // Converting toHex is accounting for data and input being Uint8Arrays\n  // since comparing Uint8Array is not as straightforward as comparing strings\n  toHex(formattedTransaction.data) !== toHex(formattedTransaction.input)) throw new TransactionDataAndInputError({\n    data: bytesToHex(formattedTransaction.data),\n    input: bytesToHex(formattedTransaction.input)\n  });\n  if (options.fillInputAndData) {\n    if (!isNullish(formattedTransaction.data)) {\n      formattedTransaction.input = formattedTransaction.data;\n    } else if (!isNullish(formattedTransaction.input)) {\n      formattedTransaction.data = formattedTransaction.input;\n    }\n  }\n  if (!isNullish(formattedTransaction.gasLimit)) {\n    formattedTransaction.gas = formattedTransaction.gasLimit;\n    delete formattedTransaction.gasLimit;\n  }\n  return formattedTransaction;\n}","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","isNullish","mergeDeep","format","bytesToHex","toHex","TransactionDataAndInputError","transactionInfoSchema","formatTransaction","transaction","returnFormat","arguments","length","undefined","options","transactionSchema","fillInputAndData","formattedTransaction","common","Object","assign","_a","customChain","_b","data","input","gasLimit","gas"],"sources":["C:\\Users\\SSAFY\\Desktop\\react\\S10P22C208\\frontend\\node_modules\\web3-eth\\src\\utils\\format_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Transaction, DataFormat, DEFAULT_RETURN_FORMAT, FormatType } from 'web3-types';\nimport { isNullish, ValidationSchemaInput } from 'web3-validator';\nimport { mergeDeep, format, bytesToHex, toHex } from 'web3-utils';\nimport { TransactionDataAndInputError } from 'web3-errors';\n\nimport { transactionInfoSchema, transactionSchema } from '../schemas.js';\n\nexport function formatTransaction<\n\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\tTransactionType extends Transaction = Transaction,\n>(\n\ttransaction: TransactionType,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\toptions: {\n\t\ttransactionSchema?: ValidationSchemaInput | typeof transactionSchema;\n\t\tfillInputAndData?: boolean;\n\t} = {\n\t\ttransactionSchema: transactionInfoSchema,\n\t\tfillInputAndData: false,\n\t},\n): FormatType<TransactionType, ReturnFormat> {\n\tlet formattedTransaction = mergeDeep({}, transaction as Record<string, unknown>) as Transaction;\n\tif (!isNullish(transaction?.common)) {\n\t\tformattedTransaction.common = { ...transaction.common };\n\t\tif (!isNullish(transaction.common?.customChain))\n\t\t\tformattedTransaction.common.customChain = { ...transaction.common.customChain };\n\t}\n\tformattedTransaction = format(\n\t\toptions.transactionSchema ?? transactionInfoSchema,\n\t\tformattedTransaction,\n\t\treturnFormat,\n\t);\n\tif (\n\t\t!isNullish(formattedTransaction.data) &&\n\t\t!isNullish(formattedTransaction.input) &&\n\t\t// Converting toHex is accounting for data and input being Uint8Arrays\n\t\t// since comparing Uint8Array is not as straightforward as comparing strings\n\t\ttoHex(formattedTransaction.data) !== toHex(formattedTransaction.input)\n\t)\n\t\tthrow new TransactionDataAndInputError({\n\t\t\tdata: bytesToHex(formattedTransaction.data),\n\t\t\tinput: bytesToHex(formattedTransaction.input),\n\t\t});\n\n\tif (options.fillInputAndData) {\n\t\tif (!isNullish(formattedTransaction.data)) {\n\t\t\tformattedTransaction.input = formattedTransaction.data;\n\t\t} else if (!isNullish(formattedTransaction.input)) {\n\t\t\tformattedTransaction.data = formattedTransaction.input;\n\t\t}\n\t}\n\n\tif (!isNullish(formattedTransaction.gasLimit)) {\n\t\tformattedTransaction.gas = formattedTransaction.gasLimit;\n\t\tdelete formattedTransaction.gasLimit;\n\t}\n\n\treturn formattedTransaction as FormatType<TransactionType, ReturnFormat>;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,qBAAqB,QAAoB,YAAY;AACvF,SAASC,SAAS,QAA+B,gBAAgB;AACjE,SAASC,SAAS,EAAEC,MAAM,EAAEC,UAAU,EAAEC,KAAK,QAAQ,YAAY;AACjE,SAASC,4BAA4B,QAAQ,aAAa;AAE1D,SAASC,qBAAqB,QAA2B,eAAe;AAExE,OAAM,SAAUC,iBAAiBA,CAIhCC,WAA4B,EAQ3B;EAAA,IAPDC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6BX,qBAAqC;EAAA,IAClEc,OAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAGI;IACHI,iBAAiB,EAAER,qBAAqB;IACxCS,gBAAgB,EAAE;GAClB;;EAED,IAAIC,oBAAoB,GAAGf,SAAS,CAAC,EAAE,EAAEO,WAAsC,CAAgB;EAC/F,IAAI,CAACR,SAAS,CAACQ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,MAAM,CAAC,EAAE;IACpCD,oBAAoB,CAACC,MAAM,GAAAC,MAAA,CAAAC,MAAA,KAAQX,WAAW,CAACS,MAAM,CAAE;IACvD,IAAI,CAACjB,SAAS,CAAC,CAAAoB,EAAA,GAAAZ,WAAW,CAACS,MAAM,cAAAG,EAAA,uBAAAA,EAAA,CAAEC,WAAW,CAAC,EAC9CL,oBAAoB,CAACC,MAAM,CAACI,WAAW,GAAAH,MAAA,CAAAC,MAAA,KAAQX,WAAW,CAACS,MAAM,CAACI,WAAW,CAAE;;EAEjFL,oBAAoB,GAAGd,MAAM,CAC5B,CAAAoB,EAAA,GAAAT,OAAO,CAACC,iBAAiB,cAAAQ,EAAA,cAAAA,EAAA,GAAIhB,qBAAqB,EAClDU,oBAAoB,EACpBP,YAAY,CACZ;EACD,IACC,CAACT,SAAS,CAACgB,oBAAoB,CAACO,IAAI,CAAC,IACrC,CAACvB,SAAS,CAACgB,oBAAoB,CAACQ,KAAK,CAAC;EACtC;EACA;EACApB,KAAK,CAACY,oBAAoB,CAACO,IAAI,CAAC,KAAKnB,KAAK,CAACY,oBAAoB,CAACQ,KAAK,CAAC,EAEtE,MAAM,IAAInB,4BAA4B,CAAC;IACtCkB,IAAI,EAAEpB,UAAU,CAACa,oBAAoB,CAACO,IAAI,CAAC;IAC3CC,KAAK,EAAErB,UAAU,CAACa,oBAAoB,CAACQ,KAAK;GAC5C,CAAC;EAEH,IAAIX,OAAO,CAACE,gBAAgB,EAAE;IAC7B,IAAI,CAACf,SAAS,CAACgB,oBAAoB,CAACO,IAAI,CAAC,EAAE;MAC1CP,oBAAoB,CAACQ,KAAK,GAAGR,oBAAoB,CAACO,IAAI;KACtD,MAAM,IAAI,CAACvB,SAAS,CAACgB,oBAAoB,CAACQ,KAAK,CAAC,EAAE;MAClDR,oBAAoB,CAACO,IAAI,GAAGP,oBAAoB,CAACQ,KAAK;;;EAIxD,IAAI,CAACxB,SAAS,CAACgB,oBAAoB,CAACS,QAAQ,CAAC,EAAE;IAC9CT,oBAAoB,CAACU,GAAG,GAAGV,oBAAoB,CAACS,QAAQ;IACxD,OAAOT,oBAAoB,CAACS,QAAQ;;EAGrC,OAAOT,oBAAiE;AACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}