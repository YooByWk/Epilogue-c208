{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { padLeft, toBigInt } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { WORD_SIZE } from '../utils.js';\nimport { numberLimits } from './numbersLimits.js';\n// eslint-disable-next-line no-bitwise\nconst mask = BigInt(1) << BigInt(256);\nfunction bigIntToUint8Array(value) {\n  let byteLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WORD_SIZE;\n  let hexValue;\n  if (value < 0) {\n    hexValue = (mask + value).toString(16);\n  } else {\n    hexValue = value.toString(16);\n  }\n  hexValue = padLeft(hexValue, byteLength * 2);\n  return utils.hexToUint8Array(hexValue);\n}\nfunction uint8ArrayToBigInt(value, max) {\n  const hexValue = utils.uint8ArrayToHexString(value);\n  const result = BigInt(hexValue);\n  if (result <= max) return result;\n  return result - mask;\n}\nexport function encodeNumber(param, input) {\n  let value;\n  try {\n    value = toBigInt(input);\n  } catch (e) {\n    throw new AbiError('provided input is not number value', {\n      type: param.type,\n      value: input,\n      name: param.name\n    });\n  }\n  const limit = numberLimits.get(param.type);\n  if (!limit) {\n    throw new AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n  if (value < limit.min) {\n    throw new AbiError('provided input is less then minimum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n  if (value > limit.max) {\n    throw new AbiError('provided input is greater then maximum for given type', {\n      type: param.type,\n      value: input,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n  return {\n    dynamic: false,\n    encoded: bigIntToUint8Array(value)\n  };\n}\nexport function decodeNumber(param, bytes) {\n  if (bytes.length < WORD_SIZE) {\n    throw new AbiError('Not enough bytes left to decode', {\n      param,\n      bytesLeft: bytes.length\n    });\n  }\n  const boolBytes = bytes.subarray(0, WORD_SIZE);\n  const limit = numberLimits.get(param.type);\n  if (!limit) {\n    throw new AbiError('provided abi contains invalid number datatype', {\n      type: param.type\n    });\n  }\n  const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n  if (numberResult < limit.min) {\n    throw new AbiError('decoded value is less then minimum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      minimum: limit.min.toString()\n    });\n  }\n  if (numberResult > limit.max) {\n    throw new AbiError('decoded value is greater then maximum for given type', {\n      type: param.type,\n      value: numberResult,\n      name: param.name,\n      maximum: limit.max.toString()\n    });\n  }\n  return {\n    result: numberResult,\n    encoded: bytes.subarray(WORD_SIZE),\n    consumed: WORD_SIZE\n  };\n}","map":{"version":3,"names":["AbiError","padLeft","toBigInt","utils","WORD_SIZE","numberLimits","mask","BigInt","bigIntToUint8Array","value","byteLength","arguments","length","undefined","hexValue","toString","hexToUint8Array","uint8ArrayToBigInt","max","uint8ArrayToHexString","result","encodeNumber","param","input","e","type","name","limit","get","min","minimum","maximum","dynamic","encoded","decodeNumber","bytes","bytesLeft","boolBytes","subarray","numberResult","consumed"],"sources":["C:\\Users\\SSAFY\\Desktop\\react\\S10P22C208\\frontend_react\\node_modules\\web3-eth-abi\\src\\coders\\base\\number.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiError } from 'web3-errors';\nimport type { AbiParameter } from 'web3-types';\nimport { padLeft, toBigInt } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { numberLimits } from './numbersLimits.js';\n\n// eslint-disable-next-line no-bitwise\nconst mask = BigInt(1) << BigInt(256);\n\nfunction bigIntToUint8Array(value: bigint, byteLength = WORD_SIZE): Uint8Array {\n\tlet hexValue;\n\tif (value < 0) {\n\t\thexValue = (mask + value).toString(16);\n\t} else {\n\t\thexValue = value.toString(16);\n\t}\n\thexValue = padLeft(hexValue, byteLength * 2);\n\treturn utils.hexToUint8Array(hexValue);\n}\n\nfunction uint8ArrayToBigInt(value: Uint8Array, max: bigint): bigint {\n\tconst hexValue = utils.uint8ArrayToHexString(value);\n\tconst result = BigInt(hexValue);\n\tif (result <= max) return result;\n\treturn result - mask;\n}\n\nexport function encodeNumber(param: AbiParameter, input: unknown): EncoderResult {\n\tlet value;\n\ttry {\n\t\tvalue = toBigInt(input);\n\t} catch (e) {\n\t\tthrow new AbiError('provided input is not number value', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t});\n\t}\n\tconst limit = numberLimits.get(param.type);\n\tif (!limit) {\n\t\tthrow new AbiError('provided abi contains invalid number datatype', { type: param.type });\n\t}\n\tif (value < limit.min) {\n\t\tthrow new AbiError('provided input is less then minimum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t\tminimum: limit.min.toString(),\n\t\t});\n\t}\n\tif (value > limit.max) {\n\t\tthrow new AbiError('provided input is greater then maximum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: input,\n\t\t\tname: param.name,\n\t\t\tmaximum: limit.max.toString(),\n\t\t});\n\t}\n\treturn {\n\t\tdynamic: false,\n\t\tencoded: bigIntToUint8Array(value),\n\t};\n}\n\nexport function decodeNumber(param: AbiParameter, bytes: Uint8Array): DecoderResult<bigint> {\n\tif (bytes.length < WORD_SIZE) {\n\t\tthrow new AbiError('Not enough bytes left to decode', { param, bytesLeft: bytes.length });\n\t}\n\tconst boolBytes = bytes.subarray(0, WORD_SIZE);\n\tconst limit = numberLimits.get(param.type);\n\tif (!limit) {\n\t\tthrow new AbiError('provided abi contains invalid number datatype', { type: param.type });\n\t}\n\tconst numberResult = uint8ArrayToBigInt(boolBytes, limit.max);\n\n\tif (numberResult < limit.min) {\n\t\tthrow new AbiError('decoded value is less then minimum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: numberResult,\n\t\t\tname: param.name,\n\t\t\tminimum: limit.min.toString(),\n\t\t});\n\t}\n\tif (numberResult > limit.max) {\n\t\tthrow new AbiError('decoded value is greater then maximum for given type', {\n\t\t\ttype: param.type,\n\t\t\tvalue: numberResult,\n\t\t\tname: param.name,\n\t\t\tmaximum: limit.max.toString(),\n\t\t});\n\t}\n\treturn {\n\t\tresult: numberResult,\n\t\tencoded: bytes.subarray(WORD_SIZE),\n\t\tconsumed: WORD_SIZE,\n\t};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}